;#### Note: Most of these settings have to be applied/changed to the WindowsEngine.ini using a .pak file using U4SS.
;#### Some of these can be changed in the editable Engine.ini, but the vast majority of the ones that make an actual performance impact can only be changed via a .pak file overwriting them.
;#### Note 2: My personal rig is an RTX 5080, AMD 5800X3D, 64GB RAM, and a Gen 4 NVMe. 
;#### These settings I'm tuning try to make the most out of my hardware. Results will vary greatly with different hardware.
;#### Feel free to do with these settings as you will, but be aware that they're largely untested, probably unstable, and could even corrupt your game in certain circumstances. You've been warned.
[Audio]
AudioMixerModuleName=AudioMixerXAudio2                               ; (Bethesda INI Default)
PlatformFormat=OGG                                                   ; (Bethesda INI Default)
PlatformStreamingFormat=OGG                                          ; (Bethesda INI Default)
PlatformHeadroomDB=-3                                                ; (Bethesda INI Default)


[TextureStreaming]
;PoolSizeVRAMPercentage=70                                           ; (Bethesda INI Default)
PoolSizeVRAMPercentage=80


[Core.System]
; ========== Task Graph Parallelism ==========
TaskGraph.ForkedProcessMaxWorkerThreads=8                            ; Core/Thread related setting. Too high could overload the game thread, so don't necessairly set it to your core/thread count.
TaskGraph.NumForegroundWorkers=8                                     ; ^ See Above ^


[GarbageCollection]
; ========== Garbage Collection Tuning ==========
; I still have to do a lot more testing to see what/where/how performance can be gained via GC tweaking.
; In the meantime, these values are sensible and I haven't seen any performance regressions
gc.IncrementalGCTimePerFrame=0.001                                   ; Time slice for incremental GC per frame (ms)
gc.MinGCClusterSize=2                                                ; Minimum objects in a cluster to be processed by GC
gc.NumRetriesBeforeForcingGC=5                                       ; Retries before forcing a full GC
gc.TimeBetweenPurgingPendingKillObjects=30.0                         ; Time (seconds) between purging objects marked for kill
gc.PerformanceGCWhileAsyncLoading=1                                  ; (Beth=0) Untested: Allow GC during async loading
;gc.LowMemory.MemoryThresholdMB=256.0                                ; (Beth=0) Threshold to trigger low memory GC (Likely ineffective)
;gc.LowMemory.IncrementalGCTimePerFrame=0.0005                       ; (Beth=0) Time slice for low memory incremental GC (ms)
;gc.LowMemory.TimeBetweenPurgingPendingKillObjects=20.0              ; (Beth=0) Purge interval during low memory GC
;ai.DestroyNavDataInCleanUpAndMarkPendingKill=0                      ; (Beth=1) Setting to 0 prevents immediate NavData cleanup


[SystemSettings]
; ========== Core System & Quality ==========
r.setres=1280x720                                                    ; Default resolution fallback (usually overridden by user settings)
QualityLevelMapping="high"                                           ; Maps engine quality presets (e.g., Low, Medium, High)
framepro.ScopeMinTimeMicroseconds=10                                 ; (Bethesda INI Default)
;r.OneFrameThreadLag=1                                                ; Default: 1 (Render thread lags 1 frame behind game thread)

; ========== General Log / Dev Settings ==========
r.EnableDebugSpam_GetObjectPositionAndScale=0                        ; (Beth=1) Possible log spam reduction
r.NGX.LogLevel=0                                                     ; (Beth=1) ^ See above ^
r.VT.CsvStats=0                                                      ; (Beth=1) ^ See above ^
r.ShaderPipelineCache.ReportPSO=0                                    ; (Beth=1) ^ See above ^
r.ShaderLibrary.PrintExtendedStats=0                                 ; (Beth=1) ^ See above ^
memory.logGenericPlatformMemoryStats=0                               ; (Beth=1) ^ See above ^
p.Chaos.VisualDebuggerEnable=0                                       ; (Beth=1) ^ See above ^
LevelSequence.InvalidBindingTagWarnings=false                        ; (Beth=true) ^ See above ^
;r.D3D12.LightweightDRED=0                                            ; (Beth=1) This should be left on. It only captures debug data on a GPU crash. There's virtually no overhead in keeping it on.

; ========== Asset Streaming / Loading ==========
;r.Streaming.PoolSize=8192                                           ; Increases streaming pool size (MB) (Beth=2000)
;r.Streaming.LimitPoolSizeToVRAM=0                                   ; Default: 0
r.Streaming.MaxTempMemoryAllowed=2048                                ; Max temp system RAM for streaming (MB). 4096 caused visual anomalies, so tweak carefully.
r.Streaming.AmortizeCPUToGPUCopy=1                                   ; (Beth=0) Reduces hitches <- **High Impact**
r.Streaming.MaxNumTexturesToStreamPerFrame=10                        ; This only works if r.Streaming.AmortizeCPUToGPUCopy is 1. Works with r.Streaming.FramesForFullUpdate. Too high can cause VRAM oversaturation leading to hitching.
r.Streaming.FramesForFullUpdate=5                                    ; (Beth=5) This works with MaxNumTexturesToStreamPerFrame. Setting FramesForFullUpdate too high can cause texture pop-in. Too low can cause CPU spikes.
r.Streaming.NumStaticComponentsProcessedPerFrame=100                 ; (Beth=50) Too high could result in hitching. Too low will cause lower frames due to processing overhead.
r.Streaming.ParallelRenderAssetsNumWorkgroups=4                      ; Core/Thread related setting. Too high could overload the game thread, so don't necessairly set it to your core/thread count.
r.IO.UseDirectStorage=1                                              ; Attempt to use DirectStorage (Requires game implementation, so probably does nothing)
r.IO.VirtualTextures=1                                               ; Enable I/O system support for Virtual Textures

; ========== Virtual Texture Streaming ==========
r.VT.CacheSizeKB=262144
r.VT.MaxUploadsPerFrame=16
r.VT.TileSize=128
r.VT.ParallelFeedbackTasks=1

; ========== Particle / FX Tweaks ==========
fx.NiagaraAllowRuntimeScalabilityChanges=1                           ; (Bethesda INI Default)
fx.ParticlePerfStats.Enabled=false                                   ; (Beth=true)
fx.AllowFastPathFunctionLibrary=1
FX.BatchAsync=1                                                      
FX.BatchAsyncBatchSize=24
fx.DeferrPSCDeactivation=1                                           ; Defer ParticleSystemComponent deactivation (avoids stalls) <- **High Impact**
FX.EarlyScheduleAsync=1
r.Emitter.FastPoolEnable=1                                           ; Enable fast emitter pooling (reduces frame spikes) <- **High Impact**
fx.EnableCircularAnimTrailDump=0
fx.ScalabilityManParallelThreshold=25
fx.ScalabilityMaxUpdatesPerFrame=25
fx.SkipVectorVMBackendOptimizations=0                                ; (Beth=1) I'm not sure why this was off by default. Seems like free performance
;fx.NiagaraBatcher.FreeBufferEarly=0                                 ; (Beth=1) Default behavior for Niagara buffer freeing

; ========== Nanite Performance ==========
r.Nanite.MaterialVisibility=1
r.Nanite.MaterialVisibility.Async=1                                  ; 
r.Nanite.Streaming.MaxPageInstallsPerFrame=128                       ; (Beth=128) Max Nanite pages installed per frame (Default: 32) More = higher VRAM/SSD use
r.Nanite.Streaming.StreamingPoolSize=1024                            ; (Beth=512) Nanite streaming pool size (MB) (Default: 512) More = higher VRAM use; 2048 causes distorted textures
r.Nanite.VSMMeshShaderRasterization=1                                ; Enable Nanite rasterization using mesh shaders for VSMs

; ========== Lumen Tweaks ==========
r.Lumen.AsyncCompute=1                                               ; Big performance gains. As with the other AsyncCompute options, if your GPU or CPU is overloaded, this could actually harm performance. Reasonably modern hardware will benefit, however.
r.LumenScene.Lighting.AsyncCompute=1                                 ; ^ See above ^
r.Lumen.DiffuseIndirect.AsyncCompute=1                               ; ^ See above ^
r.Lumen.Reflections.AsyncCompute=1                                   ; ^ See above ^
r.Lumen.Reflections.RadianceCache=1                                  ; Small performance gain.
r.Lumen.ScreenProbeGather.TemporalFilterProbes=1                     ; Slight performance gain. May be scene dependent, but should always be a net positive
r.LumenScene.DirectLighting.OffscreenShadowing.TraceMeshSDFs=0       ; Disable Mesh SDF tracing for offscreen shadows (faster, less accurate)
r.LumenScene.GPUDrivenUpdate=1                                       ; Small performance gain, no visible loss. Especially good if you're CPU bound, possiblybad if you're GPU bound.
r.LumenScene.ParallelUpdate=1                                       ; (Beth=1) Allows Parallel CPU Proccessing of LumenScene. Big performance loss if disabled, but if very CPU limited setting to 0 could *maybe* help (but probably not)                               
;r.LumenScene.FarField.MaxTraceDistance=1000000                      ; Negligible performance impact but high visual loss
;r.RayTracing.Culling.Radius=50000                                   ; Decent performance change, but large change in visuals. Default seems like a good balance, but you could tune it in for better perf/visual ratio

; ========== Shadows ==========

r.Shadow.DetectVertexShaderLayerAtRunTime=1                          ; (Bethesda INI Default)
r.DFShadowAsyncCompute=1                                             ; (Beth=0) Moderate performance gain. (Potenial flicker risk in some games, but I've yet to see it in Oblivion Remastered)
r.Shadow.CacheWPOPrimitives=1                                        ; (Beth=0) Small performance uplift. Potential stale shadows
r.Shadow.CSMCaching=1                                                ; (Beth=0) ^ See above ^
r.Shadow.Virtual.Cache.AllocateViaLRU=1                              ; (Beth=0) Use LRU allocation for Virtual Shadow Map cache
;r.Shadow.Virtual.NonNanite.UseHZB=1                                  ; (Beth=2) No real difference between 1 or 2. May be scene dependant?
r.Shadow.Virtual.UseHZB=1                                            ; (Beth=2) ~2-3% performance improvement when set to 1. Possible quality loss
r.DistanceFields.ParallelUpdate=1                                    ; Allows multiple threads for DistanceFields


; ========== Scene Culling / Occlusion ==========
;r.Occlusion.SingleRHIThreadStall=1                                  ; (Bethesda INI Default)
r.Occlusion.SingleRHIThreadStall=0                                   ; Disables a debug setting that can cause hitching
r.InstanceCulling.OcclusionCull=1
r.Visibility.FrustumCull.UseSphereTestFirst=true                     ; Use sphere test first for frustum culling (optimization)
r.NumBufferedOcclusionQueries=2
r.DownsampledOcclusionQueries=1                                      ; Use downsampled occlusion queries (performance)
;r.EarlyZPass=2                                                      ; (Beth=2) Default Early Z-Pass mode. Anything other than 2 is bad

; ========== Driver / RHI Tweaks ==========
r.D3D.ForceDXC=1
r.D3D12.RayTracing.AllowSpecializedStateObjects=1
r.GTSyncType=0                                                       ; https://dev.epicgames.com/documentation/en-us/unreal-engine/low-latency-frame-syncing-in-unreal-engine?application_version=5.3
r.RHICmdBufferWriteLocks=0                                           ; (Beth=1) (VSync related)
RHI.SyncThreshold=999                                                ; (Beth=7) 999 ensures vsync never kicks in. This shouldn't matter when r.GTSyncType is 0, however. 
RHI.TransientAllocator.BufferCacheSize=256
RHI.TransientAllocator.TextureCacheSize=256
RHI.TransientAllocator.MaximumHeapSize=1024
d3d12.AllowPoolAllocateIndirectArgBuffers=1
D3D12.InsertOuterOcclusionQuery=1
D3D12.MaxCommandsPerCommandList=20000
D3D12.PSO.DiskCache=1                                                ; (Beth=0)
D3D12.PSO.DriverOptimizedDiskCache=1                                 ; (Beth=0)
d3d12.VRAMBufferPoolDefrag.MaxCopySizePerFrame=16777216              ; Max copy size (bytes) per frame for D3D12 VRAM buffer defrag (16MB)
d3d12.VRAMTexturePoolDefrag.MaxCopySizePerFrame=16777216             ; Max copy size (bytes) per frame for D3D12 VRAM texture defrag (16MB)
D3D12.ZeroBufferSizeInMB=16

; ========== Velocity / Temporal ==========
;r.BasePassOutputsVelocity=1                                         ; Deprecated; Use r.VelocityOutputPass instead
;r.BasePassForceOutputsVelocity=1                                    ; Deprecated
;r.VelocityOutputPass=0                                               ; (Beth=0) ; 1 Causes Flickering. 2 causes player model to partially disappear in inventory menu
;r.Velocity.ForceOutput=0                                             ; (Beth=0) ; Should really only used when r.VelocityOutputPass=1
;r.Velocity.EnableVertexDeformation=2                                 ; (Beth=2)
;r.TSR.16BitVALU=1                                                    ; (Beth=1) Use 16-bit VALU for Temporal Super Resolution (if supported). Setting to 1 overrides vendor specific flags (e.g. r.TSR.16BitVALU.Nvidia, r.TSR.16BitVALU.AMD)

; ========== Grass ==========
grass.MaxAsyncTasks=8
grass.MaxCreatePerFrame=6
grass.MinFramesToKeepGrass=60
grass.UseHaltonDistribution=1                                        ; Use Halton distribution for uniform grass scatter

; ========== Foliage ==========
;foliage.MinOcclusionQueriesPerComponent=6                           ; (Beth=6) Default min occlusion queries per foliage component
foliage.MaxOcclusionQueriesPerComponent=32                           ; (Beth=16) More culling, higher CPU cost

; ========== GPUScene ==========
r.GPUScene.ParallelUpdate=1                                          ; (Beth=0)
r.GPUScene.MaxPooledUploadBufferSize=524288                          ; (Beth=256000)

; ========== DLSS Ray Reconstruction ==========
; Make sure you have reflections set to Ultra. Otherwise weapons and armor will have heavy speckling/noise
; You need to have the DLSS-D DLL placed for this to work.
; Also, this only works with Hardware Lumen/Ray Tracing. Otherwise tweaking the settings will probably introduce some weird/bad visuals
;r.NGX.DLSS.denoisermode=1                                            ; This enables Nvidia Ray Reconstruction. YOU MUST PLACE THE DLL FOR THIS TO WORK
;r.Lumen.Reflections.BilateralFilter=0
;r.Lumen.Reflections.ScreenSpaceReconstruction=0                      ; If you have reflections set below Ultra in-game, you can set this to 1 and it'll fix the speckling/noise
;r.lumen.Reflections.Temporal=0                                       ; This should be left to 1 if using not using Hardware Lumen without Nvidia Ray Reconstruction/Denoiser. Otherwise you get weird shadows on distant objects/trees 
;r.Shadow.Denoiser=0
;r.Lumen.ScreenProbeGather.Temporal.MaxFramesAccumulated=8            ; Change this until it looks good. Too low and you'll see some odd shadows popping in and out, particularly if you stand next to reflective materials/water


[/Script/Engine.StreamingSettings]
s.AsyncLoadingTimeLimit=8                                            ; (Beth=5)
s.IoDispatcherBufferMemoryMB=512
s.IoDispatcherCacheSizeMB=2048
s.IoDispatcherDecompressionWorkerCount=6
s.MaxIncomingRequestsToStall=0                                       ; Max incoming IO requests before stalling (0=disabled)
s.MaxPrecacheRequestsInFlight=12
s.MaxReadyRequestsToStallMB=512
s.MinBulkDataSizeForAsyncLoading=131072
s.PriorityAsyncLoadingExtraTime=2
s.PriorityLevelStreamingActorsUpdateExtraTime=2
s.ProcessPrestreamingRequests=1
s.LevelStreamingComponentsRegistrationGranularity=10
s.LevelStreamingComponentsUnregistrationGranularity=5
s.AdaptiveAddToWorld.Enabled=1                                       ; (Beth=0)
s.AdaptiveAddToWorld.Method=0                                        ; 0=by remaining work, 1=by total work
s.AdaptiveAddToWorld.TargetMaxTimeRemaining=1.0
s.AdaptiveAddToWorld.TimeSliceMaxIncreasePerSecond=5
s.AdaptiveAddToWorld.TimeSliceMaxReducePerSecond=5
wp.Runtime.LevelStreamingContinuouslyIncrementalGCWhileLevelsPendingPurgeForWP=32 ; (Beth=64)
wp.Runtime.MaxLoadingStreamingCells=16                               ; (Beth=4)


[PakCache]
CachePerPakFile=1                                                    ; Enable per-pak file caching (can help with mods)
MaxBlockMemory=2048                                                  ; Max RAM cache size (MB) for PakCache (UE5 Default: 512)
MaxRequestSizeToLowerLevellKB=8192                                   ; Max request size (KB) to lower level IO (UE5 Default: 3072) Higher may reduce pop-in
MaxRequestsToLowerLevel=16
NumUnreferencedBlocksToCache=80                                      ; Number of freed blocks kept for potential re-use
UseNewTrim=1                                                         ; Use newer eviction logic for PakCache

[/Script/Engine.InputSettings]
RawMouseInputEnabled=1
bDisableMouseAcceleration=true
bEnableMouseSmoothing=false
bViewAccelerationEnabled=false

[/Script/AkAudio.AkSettings]
bEnableMultiCoreRendering=true                                       ; Enable multi-core rendering for AkAudio (Wwise)

[/Script/Engine.Engine]
bAllowMultiThreadedShaderCompile=true

[PlatformCrypto]
PlatformRequiresDataCrypto=true                                      ; (Bethesda INI Default)

[/Script/Engine.RendererSettings]
r.Shaders.RemoveUnusedInterpolators=1                                ; (Bethesda INI Default)

; ========== Variable Rate Shading ==========
; VRS seems to be disabled at the project level for Oblivion Remastered. At least my attempts to get it to work did nothing. You can force it in-game via console commands, but from my experience it had zero effect.
;r.VRS.Enable=true                                                    ; (Beth=false)
;r.VRS.EnableImage=true                                               ; (Beth=false)
;r.VRS.ContrastAdaptiveShading=1                                      ; (Beth=1)
;r.VRS.Tier=2

[Core.Log]
; https://unrealcommunity.wiki/logging-lgpidy6i
; Valid Values: Fatal, Error, Warning, Display, Log, Verbose, VeryVerbose, All, off
; Silence any and all possible log spam that could have an I/O overhead. This is overkill and most likely won't have even a miniscule performance benefit
; Note: These can/should be placed in Engine.ini
LogInit=off
LogLoad=off
LogStreaming=off
LogTextureStreaming=off
LogPakFile=off
LogNavigation=off
LogBlueprint=off
LogShaderLibrary=off
LogRender=off
LogStreamingVolumes=off
LogPhysics=off
LogParticles=off
Global=off

; ========== Telemetry ==========
[CrashReportClient]
bImplicitSend=false
bAgreeToCrashUpload=false

[Engine.ErrorHandling]
bPromptForRemoteDebugging=false
bPromptForRemoteDebugOnEnsure=false

[/Script/WInstrumentedProfilersSettings.WTelemetrySettings]
bEnableTelemetry=false